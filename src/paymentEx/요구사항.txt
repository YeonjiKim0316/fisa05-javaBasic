### **1. 추상 클래스 - `Payment`**  v

- 모든 결제 수단이 가져야 할 **공통 속성**과 **기능**을 정의합니다.
1. **필드**:
    - `amount` (double): 결제 금액 (**접근 제어자** 사용)
2. **메서드**:
    - **추상 메서드** `processPayment()` – 결제를 처리합니다.
    - **일반 메서드** `displayAmount()` – 결제 금액을 출력합니다.
3. **정적 필드**와 **정적 메서드**를 사용해 **전체 결제 건수(count)**를 관리합니다.

---

### **2. 인터페이스 - `Refundable`**   v

- **환불 기능**을 제공해야 하는 결제 수단을 구분합니다.
1. **메서드**:
    - `refund()` – 결제를 환불합니다.

---

### **3. 상속을 활용한 결제 수단 구현**

1. **신용카드 결제** (`CreditCardPayment`)
    - `Payment`를 **상속**합니다.
    - `Refundable` 인터페이스를 **구현**하여 **환불 기능**을 제공합니다.
    - 결제 금액을 출력하고 결제를 처리합니다.
2. **네이버페이 결제** (`NaverPayPayment`)
    - `Payment`를 **상속**합니다.
    - `Refundable` 인터페이스를 **구현**합니다.
    - 결제 금액을 출력하고 결제를 처리합니다.

---

### **4. 접근 제어자 사용**

- 결제 금액 필드는 **private**으로 선언하여 외부 접근을 차단합니다.
- **getter 메서드**를 사용해 안전하게 값을 읽을 수 있도록 합니다.

---

## **5. Main 클래스: 프로그램 실행**

1. **신용카드 결제**와 **네이버페이 결제** 객체를 생성합니다.
2. 각 결제 수단으로 **결제**를 처리하고, **환불 기능**을 테스트합니다.
3. **정적 메서드**를 사용해 **전체 결제 건수**를 출력합니다.

public class Main {
    public static void main(String[] args) {
        // 신용카드와 NaverPay 결제 객체 생성
        Payment creditCard = new CreditCardPayment(50000);
        Payment naverPay = new NaverPayPayment(30000);

        // 결제 처리 (정적 메서드 사용)
        PaymentProcessor.process(creditCard);
        PaymentProcessor.process(naverPay);

        System.out.println();

        // 환불 기능 테스트 (다운캐스팅 사용)
        // instanceof 연산자는 객체가 null인 경우 false를 반환합니다.
				// instanceof 연산자를 사용하여 타입을 확인한 후, 안전하게 다운캐스팅할 수 있습니다.
        if (creditCard instanceof Refundable) {
            ((Refundable) creditCard).refund();
        }

        if (naverPay instanceof Refundable) {
            ((Refundable) naverPay).refund();
        }
    }
}